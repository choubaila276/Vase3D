import numpy as np

def sigmoid(x):
return 1 / (1 + np.exp(-x))

class MLP:
    def __init__(self, *args):
       
        self.shape = args  # Nombre de neurones dans chaque couche
        n = len(args)  # Nombre de couches

        # Initialisation des couches avec le biais sauf pour la dernière couche
        self.layers = []
        self.layers.append(np.ones(self.shape[0] + 1))  # Couche d'entrée + biais
        for i in range(1, n - 1):  # Couches cachées avec biais
            self.layers.append(np.ones(self.shape[i] + 1))
        self.layers.append(np.ones(self.shape[-1]))  # Couche de sortie sans biais

        # Initialisation des poids
        self.weights = []
     
