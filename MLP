import numpy as np


def sigmoid(x):
    return 1 / (1 + np.exp(-x))


def threshold(x):
    return (x >= 0.5).astype(int)


class MLP:
    def __init__(self, *args):

        self.shape = args
        n = len(args)

        self.layers = []
        self.layers.append(np.ones(self.shape[0] + 1))
        for i in range(1, n - 1):
            self.layers.append(np.ones(self.shape[i] + 1))
        self.layers.append(np.ones(self.shape[-1]))
        self.weights = []
        self.reset()

    def reset(self):
        self.weights = []
        for i in range(len(self.layers) - 1):
            n_in = self.layers[i].size
            n_out = self.layers[i + 1].size
            if i < len(self.layers) - 2:
                n_out -= 1
            self.weights.append(np.random.normal(0, 1 / np.sqrt(n_in), (n_in, n_out)))

    def propagate_forward(self, data):
        self.layers[0][:-1] = data

        for i in range(1, len(self.shape) - 1):
            self.layers[i][:-1] = sigmoid(np.dot(self.layers[i - 1], self.weights[i - 1]))
            self.layers[i][-1] = 1
        self.layers[-1][...] = threshold(sigmoid(np.dot(self.layers[-2], self.weights[-1])))
        return self.layers[-1]


    def afficher_poids(self):
       for i, w in enumerate(self.weights):
        print(f"\n Poids de la couche {i + 1} vers la couche {i + 2}:\n{w}")


mlp = MLP(2, 2, 2, 1)

print("\n Poids initiaux du rÃ©seau :")
mlp.afficher_poids()
data = np.array([0.5, 0.8])
Res = mlp.propagate_forward(data)
print("\n Sortie finale du MLP:", Res)
