import numpy as np

def sigmoid(x):
return 1 / (1 + np.exp(-x))

class MLP:
    def __init__(self, *args):
       
        self.shape = args  
        n = len(args)  

        self.layers = []
        self.layers.append(np.ones(self.shape[0] + 1))  
        for i in range(1, n - 1): 
            self.layers.append(np.ones(self.shape[i] + 1))
        self.layers.append(np.ones(self.shape[-1])) 
        self.weights = []
        self.reset()

    def reset(self):
        self.weights = []
        for i in range(len(self.layers) - 1):
            n_in = self.layers[i].size 
            n_out = self.layers[i + 1].size 
            if i < len(self.layers) - 2: 
                n_out -=  1  
            self.weights.append(np.random.normal(0, 1 / np.sqrt(n_in), (n_in, n_out)))

